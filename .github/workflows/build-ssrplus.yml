name: Build SSR Plus ipk

on:
  workflow_dispatch:
  push:
    paths:
      - ".github/workflows/build-ssrplus.yml"

env:
  # ===== 这里按需改 =====
  OWRT_VER: "23.05.3"     # 固定 OpenWrt 版本；设为 "" 则直接用 snapshots
  TARGET: "x86"           # 目标主架构，如 ramips / aarch64 / x86
  SUBTARGET: "64"         # 子架构，如 mt7621 / cortex-a53 / 64
  # ======================

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install build deps
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential git wget curl unzip \
            libncurses5-dev gawk gettext libssl-dev xsltproc \
            libxml-parser-perl zlib1g-dev file ca-certificates

      # ------- 关键：解析 SDK 下载地址（release → snapshots） -------
      - name: Resolve SDK URL (release → snapshots)
        id: sdk
        shell: bash
        run: |
          set -euo pipefail
          TUPLE="${TARGET}/${SUBTARGET}"

          find_sdk () {
            local base="$1"
            # 直接从目录索引抓取第一个 SDK tarball，避免硬编码 gcc/musl 版本
            curl -fsSL "${base}" \
              | grep -Eo 'openwrt-sdk-[^" ]+\.tar\.xz' \
              | head -n1 | awk -v b="${base}" '{print b $0}'
          }

          SDK_URL=""
          if [[ -n "${OWRT_VER}" ]]; then
            REL_BASE="https://downloads.openwrt.org/releases/${OWRT_VER}/targets/${TUPLE}/"
            SDK_URL="$(find_sdk "${REL_BASE}" || true)"
            if [[ -n "${SDK_URL}" ]]; then
              echo "Use release SDK: ${SDK_URL}"
            else
              echo "Release SDK not found, will try snapshots..."
            fi
          fi

          if [[ -z "${SDK_URL}" ]]; then
            SNAP_BASE="https://downloads.openwrt.org/snapshots/targets/${TUPLE}/"
            SDK_URL="$(find_sdk "${SNAP_BASE}" || true)"
          fi

          if [[ -z "${SDK_URL}" ]]; then
            echo "[ERROR] No SDK tarball found for ${TUPLE} (release & snapshots)."
            echo "Checked:"
            echo "  ${REL_BASE:-'(release skipped)'}"
            echo "  ${SNAP_BASE:-'(snapshots skipped)'}"
            exit 2
          fi

          echo "SDK_URL=${SDK_URL}" | tee -a "$GITHUB_ENV"
          echo "url=${SDK_URL}" >> "$GITHUB_OUTPUT"

      - name: Download & Extract SDK
        run: |
          curl -fL "$SDK_URL" -o sdk.tar.xz
          tar -xJf sdk.tar.xz
          mv openwrt-sdk-* openwrt-sdk
          echo "SDK_DIR=openwrt-sdk" >> "$GITHUB_ENV"

      # ------- 仅引入需要的 feeds 并安装 SSR Plus 及依赖 -------
      - name: Minimal feeds (only what we need)
        run: |
          cd "${SDK_DIR}"
          echo 'src-git sbwml https://github.com/sbwml/openwrt_pkgs.git;master' >> feeds.conf.default
          ./scripts/feeds update sbwml
          ./scripts/feeds install -p sbwml luci-app-ssr-plus
          ./scripts/feeds install -p sbwml xray-core v2ray-geoip v2ray-geosite \
            shadowsocks-libev-ss-local shadowsocks-libev-ss-redir

      # ------- 缓存 dl -------
      - name: Cache downloads (dl)
        uses: actions/cache@v4
        with:
          path: ${{ env.SDK_DIR }}/dl
          key: dl-${{ env.OWRT_VER || 'snapshots' }}-${{ env.TARGET }}-${{ env.SUBTARGET }}
          restore-keys: |
            dl-

      # ------- 生成 .config：SSR Plus + 核心依赖 -------
      - name: Generate .config (SSR Plus + core deps)
        run: |
          cd "${SDK_DIR}"
          cat >> .config <<'CFG'
          CONFIG_ALL_NONSHARED=y
          CONFIG_PACKAGE_luci-app-ssr-plus=y
          CONFIG_PACKAGE_xray-core=y
          CONFIG_PACKAGE_v2ray-geoip=y
          CONFIG_PACKAGE_v2ray-geosite=y
          CONFIG_PACKAGE_shadowsocks-libev-ss-local=y
          CONFIG_PACKAGE_shadowsocks-libev-ss-redir=y
          # 可选后端（需要再开）：
          # CONFIG_PACKAGE_naiveproxy=y
          # CONFIG_PACKAGE_kcptun-client=y
          CFG
          make defconfig

      # ------- 编译 -------
      - name: Build packages
        run: |
          cd "${SDK_DIR}"
          make package/luci-app-ssr-plus/compile -j"$(nproc)" V=s
          make package/xray-core/compile -j"$(nproc)" V=s || true
          make package/v2ray-geoip/compile -j"$(nproc)" V=s || true
          make package/v2ray-geosite/compile -j"$(nproc)" V=s || true
          make package/shadowsocks-libev/compile -j"$(nproc)" V=s || true

      # ------- 收集产物 -------
      - name: Collect .ipk
        id: collect
        run: |
          cd "${SDK_DIR}"
          mkdir -p /tmp/ipk
          find bin/packages -name "*.ipk" -print -exec cp -f {} /tmp/ipk/ \;
          echo "OUT_DIR=/tmp/ipk" >> $GITHUB_ENV
          echo "found=$(ls -1 /tmp/ipk/*.ipk | wc -l)" >> $GITHUB_OUTPUT
          ls -lh /tmp/ipk || true

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ssrplus-ipk-${{ env.OWRT_VER || 'snapshots' }}-${{ env.TARGET }}-${{ env.SUBTARGET }}
          path: /tmp/ipk/*.ipk
          if-no-files-found: error
          retention-days: 7

      # ------- 自动发 Release（便于在线升级） -------
      - name: Release (for online upgrade)
        if: steps.collect.outputs.found != '0'
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ssrplus-${{ env.OWRT_VER || 'snapshots' }}-${{ github.run_number }}
          name: "SSR Plus ipk ${{ env.OWRT_VER || 'snapshots' }} #${{ github.run_number }}"
          files: /tmp/ipk/*.ipk
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
