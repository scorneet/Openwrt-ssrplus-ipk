name: Build SSR Plus ipk

on:
  workflow_dispatch:
  push:
    paths:
      - ".github/workflows/build-ssrplus.yml"

env:
  # 设为 "" 可强制使用 snapshots
  OWRT_VER: "24.10.2"
  TARGET: "x86"
  SUBTARGET: "64"

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install build deps
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential git wget curl unzip \
            libncurses5-dev gawk gettext libssl-dev xsltproc \
            libxml-parser-perl zlib1g-dev file ca-certificates

      # ====== 关键修复：稳健探测 SDK 并回退 ======
      - name: Resolve SDK URL (release → snapshots)
        id: sdkurl
        shell: bash
        run: |
          set -e
          TUPLE="${TARGET}/${SUBTARGET}"

          find_sdk () {
            local base="$1"
            local url=""
            # 先尝试 sha256sums（更稳定）
            if curl -fsSL "${base}sha256sums" >/tmp/sha 2>/dev/null; then
              url=$(awk '{print $2}' /tmp/sha | sed 's/^\*//' | grep -m1 '^openwrt-sdk-.*\.tar\.xz$' || true)
              if [ -n "$url" ]; then echo "${base}${url}"; return 0; fi
            fi
            # 再尝试目录索引页面
            url=$(curl -fsSL "${base}" | grep -Eo 'openwrt-sdk-[^" ]+\.tar\.xz' | head -n1 || true)
            if [ -n "$url" ]; then echo "${base}${url}"; return 0; fi
            return 1
          }

          CANDIDATE=""
          if [ -n "${OWRT_VER}" ]; then
            REL_BASE="https://downloads.openwrt.org/releases/${OWRT_VER}/targets/${TUPLE}/"
            CANDIDATE=$(find_sdk "${REL_BASE}" || true)
            if [ -n "$CANDIDATE" ]; then
              echo "Found release SDK: $CANDIDATE"
            else
              echo "Release SDK not found, falling back to snapshots..."
            fi
          fi

          if [ -z "$CANDIDATE" ]; then
            SNAP_BASE="https://downloads.openwrt.org/snapshots/targets/${TUPLE}/"
            CANDIDATE=$(find_sdk "${SNAP_BASE}" || true)
          fi

          if [ -z "$CANDIDATE" ]; then
            echo "ERROR: No SDK tarball found for ${TUPLE}."
            echo "---- RELEASE LISTING (${REL_BASE:-N/A}) ----"
            curl -fsSL "${REL_BASE}" 2>/dev/null || true
            echo "---- SNAPSHOTS LISTING (${SNAP_BASE}) ----"
            curl -fsSL "${SNAP_BASE}" 2>/dev/null || true
            exit 2
          fi

          echo "SDK_URL=$CANDIDATE" | tee -a $GITHUB_ENV
          echo "url=$CANDIDATE" >> $GITHUB_OUTPUT

      - name: Download & extract SDK
        run: |
          curl -fLo sdk.tar.xz "$SDK_URL"
          tar -xJf sdk.tar.xz
          mv openwrt-sdk-* openwrt-sdk
          echo "SDK_DIR=openwrt-sdk" >> $GITHUB_ENV
      # ====== 关键修复到此 ======

      - name: Minimal feeds (only what we need)
        run: |
          cd "${SDK_DIR}"
          echo 'src-git sbwml https://github.com/sbwml/openwrt_pkgs.git;master' >> feeds.conf.default
          ./scripts/feeds update sbwml
          ./scripts/feeds install -p sbwml luci-app-ssr-plus
          ./scripts/feeds install -p sbwml xray-core v2ray-geoip v2ray-geosite \
            shadowsocks-libev-ss-local shadowsocks-libev-ss-redir

      - name: Cache downloads (dl)
        uses: actions/cache@v4
        with:
          path: ${{ env.SDK_DIR }}/dl
          key: dl-${{ env.OWRT_VER }}-${{ env.TARGET }}-${{ env.SUBTARGET }}
          restore-keys: |
            dl-

      - name: Generate .config (SSR Plus + core deps)
        run: |
          cd "${SDK_DIR}"
          cat >> .config <<'CFG'
          CONFIG_ALL_NONSHARED=y
          CONFIG_PACKAGE_luci-app-ssr-plus=y
          CONFIG_PACKAGE_xray-core=y
          CONFIG_PACKAGE_v2ray-geoip=y
          CONFIG_PACKAGE_v2ray-geosite=y
          CONFIG_PACKAGE_shadowsocks-libev-ss-local=y
          CONFIG_PACKAGE_shadowsocks-libev-ss-redir=y
          # Optional:
          # CONFIG_PACKAGE_naiveproxy=y
          # CONFIG_PACKAGE_kcptun-client=y
          CFG
          make defconfig

      - name: Build packages
        run: |
          cd "${SDK_DIR}"
          make package/luci-app-ssr-plus/compile -j"$(nproc)" V=s
          make package/xray-core/compile -j"$(nproc)" V=s || true
          make package/v2ray-geoip/compile -j"$(nproc)" V=s || true
          make package/v2ray-geosite/compile -j"$(nproc)" V=s || true
          make package/shadowsocks-libev/compile -j"$(nproc)" V=s || true

      - name: Collect .ipk
        id: collect
        run: |
          cd "${SDK_DIR}"
          mkdir -p /tmp/ipk
          find bin/packages -name "*.ipk" -print -exec cp -f {} /tmp/ipk/ \;
          echo "OUT_DIR=/tmp/ipk" >> $GITHUB_ENV
          echo "found=$(ls -1 /tmp/ipk/*.ipk | wc -l)" >> $GITHUB_OUTPUT
          ls -lh /tmp/ipk

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ssrplus-ipk-${{ env.OWRT_VER || 'snapshots' }}-${{ env.TARGET }}-${{ env.SUBTARGET }}
          path: /tmp/ipk/*.ipk
          if-no-files-found: error
          retention-days: 7

      - name: Release (for online upgrade)
        if: steps.collect.outputs.found != '0'
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ssrplus-${{ env.OWRT_VER || 'snapshots' }}-${{ github.run_number }}
          name: "SSR Plus ipk ${{ env.OWRT_VER || 'snapshots' }} #${{ github.run_number }}"
          files: /tmp/ipk/*.ipk
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
